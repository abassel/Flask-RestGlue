
# https://raw.githubusercontent.com/swagger-api/swagger-petstore/master/src/main/resources/openapi.yaml

# partial content from the link above with some changes in descriptions and summaries

/pet:
  post:
    tags:
      - pet
    summary: create a pet # Add a new pet to the store
#    description: create a pet # Add a new pet to the store
    operationId: pet_create # addpet
    responses:
      '200':
        description: Successful operation
        content:
#          application/xml:
#            schema:
#              $ref: '#/components/schemas/pet'
          application/json:
            schema:
              $ref: '#/components/schemas/pet'
      '405':
        description: Invalid input
#    security:
#      - petstore_auth:
#          - 'write:pets'
#          - 'read:pets'
    requestBody:
      description: pet object that needs to be created
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/pet'
#        application/xml:
#          schema:
#            $ref: '#/components/schemas/pet'
#        application/x-www-form-urlencoded:
#          schema:
#            $ref: '#/components/schemas/pet'
  put:
    tags:
      - pet
    summary: Update an existing pet
    description: Update an existing pet by Id
    operationId: updatepet
    responses:
      '200':
        description: Successful operation
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/pet'
          application/json:
            schema:
              $ref: '#/components/schemas/pet'
      '400':
        description: Invalid ID supplied
      '404':
        description: pet not found
      '405':
        description: Validation exception
    security:
      - petstore_auth:
          - 'write:pets'
          - 'read:pets'
    requestBody:
      description: Update an existent pet in the store
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/pet'
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/pet'

  get:
    tags:
      - pet
    summary: read a pet
#    description: Returns a single pet
    operationId: pet_read
    responses:
      '200':
        description: Successful operation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pet'
      '405':
        description: Invalid input
#      '404':
#        description: pet not found

#/pet/findByStatus:
#  get:
#    tags:
#      - pet
#    summary: Finds pets by status
#    description: Multiple status values can be provided with comma separated strings
#    operationId: findpetsByStatus
#    parameters:
#      - name: status
#        in: query
#        description: Status values that need to be considered for filter
#        required: false
#        explode: true
#        schema:
#          type: string
#          enum:
#            - available
#            - pending
#            - sold
#          default: available
#    responses:
#      '200':
#        description: successful operation
#        content:
#          application/xml:
#            schema:
#              type: array
#              items:
#                $ref: '#/components/schemas/pet'
#          application/json:
#            schema:
#              type: array
#              items:
#                $ref: '#/components/schemas/pet'
#      '400':
#        description: Invalid status value
#    security:
#      - petstore_auth:
#          - 'write:pets'
#          - 'read:pets'
#/pet/findByTags:
#  get:
#    tags:
#      - pet
#    summary: Finds pets by tags
#    description: >-
#      Multiple tags can be provided with comma separated strings. Use tag1,
#      tag2, tag3 for testing.
#    operationId: findpetsByTags
#    parameters:
#      - name: tags
#        in: query
#        description: Tags to filter by
#        required: false
#        explode: true
#        schema:
#          type: array
#          items:
#            type: string
#    responses:
#      '200':
#        description: successful operation
#        content:
#          application/xml:
#            schema:
#              type: array
#              items:
#                $ref: '#/components/schemas/pet'
#          application/json:
#            schema:
#              type: array
#              items:
#                $ref: '#/components/schemas/pet'
#      '400':
#        description: Invalid tag value
#    security:
#      - petstore_auth:
#          - 'write:pets'
#          - 'read:pets'
'/pet/{id}':
  get:
    tags:
      - pet
    summary: Find pet by ID
    description: Returns a single pet
    operationId: getpetById
    parameters:
      - name: id
        in: path
        description: ID of pet to return
        required: true
        schema:
          type: integer
          format: int64
    responses:
      '200':
        description: successful operation
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/pet'
          application/json:
            schema:
              $ref: '#/components/schemas/pet'
      '400':
        description: Invalid ID supplied
      '404':
        description: pet not found
    security:
      - api_key: [ ]
      - petstore_auth:
          - 'write:pets'
          - 'read:pets'
  post:
    tags:
      - pet
    summary: Updates a pet in the store with form data
    description: ''
    operationId: updatepetWithForm
    parameters:
      - name: petId
        in: path
        description: ID of pet that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      - name: name
        in: query
        description: Name of pet that needs to be updated
        schema:
          type: string
      - name: status
        in: query
        description: Status of pet that needs to be updated
        schema:
          type: string
    responses:
      '405':
        description: Invalid input
    security:
      - petstore_auth:
          - 'write:pets'
          - 'read:pets'
  delete:
    tags:
      - pet
    summary: Deletes a pet
    description: ''
    operationId: deletepet
    parameters:
      - name: api_key
        in: header
        description: ''
        required: false
        schema:
          type: string
      - name: petId
        in: path
        description: pet id to delete
        required: true
        schema:
          type: integer
          format: int64
    responses:
      '400':
        description: Invalid pet value
    security:
      - petstore_auth:
          - 'write:pets'
          - 'read:pets'
#'/pet/{petId}/uploadImage':
#  post:
#    tags:
#      - pet
#    summary: uploads an image
#    description: ''
#    operationId: uploadFile
#    parameters:
#      - name: petId
#        in: path
#        description: ID of pet to update
#        required: true
#        schema:
#          type: integer
#          format: int64
#      - name: additionalMetadata
#        in: query
#        description: Additional Metadata
#        required: false
#        schema:
#          type: string
#    responses:
#      '200':
#        description: successful operation
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/ApiResponse'
#    security:
#      - petstore_auth:
#          - 'write:pets'
#          - 'read:pets'
#    requestBody:
#      content:
#        application/octet-stream:
#          schema:
#            type: string
#            format: binary
